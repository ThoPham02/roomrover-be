// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	profilesTblFieldNames          = builder.RawFieldNames(&ProfilesTbl{}, true)
	profilesTblRows                = strings.Join(profilesTblFieldNames, ",")
	profilesTblRowsExpectAutoSet   = strings.Join(stringx.Remove(profilesTblFieldNames), ",")
	profilesTblRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(profilesTblFieldNames, "profile_id"))
)

type (
	profilesTblModel interface {
		Insert(ctx context.Context, data *ProfilesTbl) (sql.Result, error)
		FindOne(ctx context.Context, profileId int64) (*ProfilesTbl, error)
		Update(ctx context.Context, data *ProfilesTbl) error
		Delete(ctx context.Context, profileId int64) error
	}

	defaultProfilesTblModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ProfilesTbl struct {
		ProfileId int64          `db:"profile_id"`
		Fullname  sql.NullString `db:"fullname"`
		Dob       sql.NullInt64  `db:"dob"`
		AvatarUrl sql.NullString `db:"avatar_url"`
		Address   sql.NullString `db:"address"`
		Phone     sql.NullString `db:"phone"`
		CreatedAt sql.NullInt64  `db:"created_at"`
		CreatedBy sql.NullInt64  `db:"created_by"`
		UpdatedAt sql.NullInt64  `db:"updated_at"`
		UpdatedBy sql.NullInt64  `db:"updated_by"`
	}
)

func newProfilesTblModel(conn sqlx.SqlConn) *defaultProfilesTblModel {
	return &defaultProfilesTblModel{
		conn:  conn,
		table: `"public"."profiles_tbl"`,
	}
}

func (m *defaultProfilesTblModel) Delete(ctx context.Context, profileId int64) error {
	query := fmt.Sprintf("delete from %s where profile_id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, profileId)
	return err
}

func (m *defaultProfilesTblModel) FindOne(ctx context.Context, profileId int64) (*ProfilesTbl, error) {
	query := fmt.Sprintf("select %s from %s where profile_id = $1 limit 1", profilesTblRows, m.table)
	var resp ProfilesTbl
	err := m.conn.QueryRowCtx(ctx, &resp, query, profileId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultProfilesTblModel) Insert(ctx context.Context, data *ProfilesTbl) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)", m.table, profilesTblRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.ProfileId, data.Fullname, data.Dob, data.AvatarUrl, data.Address, data.Phone, data.CreatedAt, data.CreatedBy, data.UpdatedAt, data.UpdatedBy)
	return ret, err
}

func (m *defaultProfilesTblModel) Update(ctx context.Context, data *ProfilesTbl) error {
	query := fmt.Sprintf("update %s set %s where profile_id = $1", m.table, profilesTblRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.ProfileId, data.Fullname, data.Dob, data.AvatarUrl, data.Address, data.Phone, data.CreatedAt, data.CreatedBy, data.UpdatedAt, data.UpdatedBy)
	return err
}

func (m *defaultProfilesTblModel) tableName() string {
	return m.table
}
