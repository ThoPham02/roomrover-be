// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	roomGroupsTblFieldNames          = builder.RawFieldNames(&RoomGroupsTbl{}, true)
	roomGroupsTblRows                = strings.Join(roomGroupsTblFieldNames, ",")
	roomGroupsTblRowsExpectAutoSet   = strings.Join(stringx.Remove(roomGroupsTblFieldNames, "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"), ",")
	roomGroupsTblRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(roomGroupsTblFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"))
)

type (
	roomGroupsTblModel interface {
		Insert(ctx context.Context, data *RoomGroupsTbl) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*RoomGroupsTbl, error)
		Update(ctx context.Context, data *RoomGroupsTbl) error
		Delete(ctx context.Context, id int64) error
	}

	defaultRoomGroupsTblModel struct {
		conn  sqlx.SqlConn
		table string
	}

	RoomGroupsTbl struct {
		Id        int64          `db:"id"`
		HomeId    int64          `db:"home_id"`
		Name      string         `db:"name"`
		UnitPrice float64        `db:"unit_price"`
		Acreage   float64        `db:"acreage"`
		RoomInfo  sql.NullString `db:"room_info"`
		Type      int64          `db:"type"`   // 1: Apartment, 2: House, 4: Villa
		Status    int64          `db:"status"` // 1: Draft, 2: Active, 4: Inactive
		CreatedAt sql.NullInt64  `db:"created_at"`
		CreatedBy sql.NullInt64  `db:"created_by"`
		UpdatedAt sql.NullInt64  `db:"updated_at"`
		UpdatedBy sql.NullInt64  `db:"updated_by"`
	}
)

func newRoomGroupsTblModel(conn sqlx.SqlConn) *defaultRoomGroupsTblModel {
	return &defaultRoomGroupsTblModel{
		conn:  conn,
		table: `"public"."room_groups_tbl"`,
	}
}

func (m *defaultRoomGroupsTblModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultRoomGroupsTblModel) FindOne(ctx context.Context, id int64) (*RoomGroupsTbl, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", roomGroupsTblRows, m.table)
	var resp RoomGroupsTbl
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRoomGroupsTblModel) Insert(ctx context.Context, data *RoomGroupsTbl) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)", m.table, roomGroupsTblRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.HomeId, data.Name, data.UnitPrice, data.Acreage, data.RoomInfo, data.Type, data.Status, data.CreatedBy, data.UpdatedBy)
	return ret, err
}

func (m *defaultRoomGroupsTblModel) Update(ctx context.Context, data *RoomGroupsTbl) error {
	query := fmt.Sprintf("update %s set %s where id = $1", m.table, roomGroupsTblRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Id, data.HomeId, data.Name, data.UnitPrice, data.Acreage, data.RoomInfo, data.Type, data.Status, data.CreatedBy, data.UpdatedBy)
	return err
}

func (m *defaultRoomGroupsTblModel) tableName() string {
	return m.table
}
