// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	houseServicesFieldNames          = builder.RawFieldNames(&HouseServices{})
	houseServicesRows                = strings.Join(houseServicesFieldNames, ",")
	houseServicesRowsExpectAutoSet   = strings.Join(stringx.Remove(houseServicesFieldNames), ",")
	houseServicesRowsWithPlaceHolder = strings.Join(stringx.Remove(houseServicesFieldNames, "`service_id`"), "=?,") + "=?"
)

type (
	houseServicesModel interface {
		Insert(ctx context.Context, data *HouseServices) (sql.Result, error)
		FindOne(ctx context.Context, serviceId int64) (*HouseServices, error)
		Update(ctx context.Context, data *HouseServices) error
		Delete(ctx context.Context, serviceId int64) error
	}

	defaultHouseServicesModel struct {
		conn  sqlx.SqlConn
		table string
	}

	HouseServices struct {
		ServiceId int64         `db:"service_id"`
		HouseId   sql.NullInt64 `db:"house_id"`
		Name      string        `db:"name"`
		Price     float64       `db:"price"`
		Type      int64         `db:"type"`
		CreatedAt int64         `db:"created_at"`
		UpdatedAt int64         `db:"updated_at"`
		CreatedBy int64         `db:"created_by"`
		UpdatedBy int64         `db:"updated_by"`
	}
)

func newHouseServicesModel(conn sqlx.SqlConn) *defaultHouseServicesModel {
	return &defaultHouseServicesModel{
		conn:  conn,
		table: "`house_services`",
	}
}

func (m *defaultHouseServicesModel) Delete(ctx context.Context, serviceId int64) error {
	query := fmt.Sprintf("delete from %s where `service_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, serviceId)
	return err
}

func (m *defaultHouseServicesModel) FindOne(ctx context.Context, serviceId int64) (*HouseServices, error) {
	query := fmt.Sprintf("select %s from %s where `service_id` = ? limit 1", houseServicesRows, m.table)
	var resp HouseServices
	err := m.conn.QueryRowCtx(ctx, &resp, query, serviceId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultHouseServicesModel) Insert(ctx context.Context, data *HouseServices) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, houseServicesRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.ServiceId, data.HouseId, data.Name, data.Price, data.Type, data.CreatedAt, data.UpdatedAt, data.CreatedBy, data.UpdatedBy)
	return ret, err
}

func (m *defaultHouseServicesModel) Update(ctx context.Context, data *HouseServices) error {
	query := fmt.Sprintf("update %s set %s where `service_id` = ?", m.table, houseServicesRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.HouseId, data.Name, data.Price, data.Type, data.CreatedAt, data.UpdatedAt, data.CreatedBy, data.UpdatedBy, data.ServiceId)
	return err
}

func (m *defaultHouseServicesModel) tableName() string {
	return m.table
}
