// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	housesFieldNames          = builder.RawFieldNames(&Houses{})
	housesRows                = strings.Join(housesFieldNames, ",")
	housesRowsExpectAutoSet   = strings.Join(stringx.Remove(housesFieldNames), ",")
	housesRowsWithPlaceHolder = strings.Join(stringx.Remove(housesFieldNames, "`id`"), "=?,") + "=?"
)

type (
	housesModel interface {
		Insert(ctx context.Context, data *Houses) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Houses, error)
		Update(ctx context.Context, data *Houses) error
		Delete(ctx context.Context, id int64) error
	}

	defaultHousesModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Houses struct {
		Id              int64         `db:"id"`
		Name            string        `db:"name"`
		Type            int64         `db:"type"`
		SpecificAddress string        `db:"specific_address"`
		WardId          sql.NullInt64 `db:"ward_id"`
		DistrictId      sql.NullInt64 `db:"district_id"`
		ProvinceId      sql.NullInt64 `db:"province_id"`
		CreatedAt       int64         `db:"created_at"`
		UpdatedAt       int64         `db:"updated_at"`
		CreatedBy       int64         `db:"created_by"`
		UpdatedBy       int64         `db:"updated_by"`
	}
)

func newHousesModel(conn sqlx.SqlConn) *defaultHousesModel {
	return &defaultHousesModel{
		conn:  conn,
		table: "`houses`",
	}
}

func (m *defaultHousesModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultHousesModel) FindOne(ctx context.Context, id int64) (*Houses, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", housesRows, m.table)
	var resp Houses
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultHousesModel) Insert(ctx context.Context, data *Houses) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, housesRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.Name, data.Type, data.SpecificAddress, data.WardId, data.DistrictId, data.ProvinceId, data.CreatedAt, data.UpdatedAt, data.CreatedBy, data.UpdatedBy)
	return ret, err
}

func (m *defaultHousesModel) Update(ctx context.Context, data *Houses) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, housesRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Name, data.Type, data.SpecificAddress, data.WardId, data.DistrictId, data.ProvinceId, data.CreatedAt, data.UpdatedAt, data.CreatedBy, data.UpdatedBy, data.Id)
	return err
}

func (m *defaultHousesModel) tableName() string {
	return m.table
}
