// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	provincesFieldNames          = builder.RawFieldNames(&Provinces{})
	provincesRows                = strings.Join(provincesFieldNames, ",")
	provincesRowsExpectAutoSet   = strings.Join(stringx.Remove(provincesFieldNames), ",")
	provincesRowsWithPlaceHolder = strings.Join(stringx.Remove(provincesFieldNames, "`id`"), "=?,") + "=?"
)

type (
	provincesModel interface {
		Insert(ctx context.Context, data *Provinces) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Provinces, error)
		Update(ctx context.Context, data *Provinces) error
		Delete(ctx context.Context, id int64) error
	}

	defaultProvincesModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Provinces struct {
		Id   int64  `db:"id"`
		Name string `db:"name"`
	}
)

func newProvincesModel(conn sqlx.SqlConn) *defaultProvincesModel {
	return &defaultProvincesModel{
		conn:  conn,
		table: "`provinces`",
	}
}

func (m *defaultProvincesModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultProvincesModel) FindOne(ctx context.Context, id int64) (*Provinces, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", provincesRows, m.table)
	var resp Provinces
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultProvincesModel) Insert(ctx context.Context, data *Provinces) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, provincesRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.Name)
	return ret, err
}

func (m *defaultProvincesModel) Update(ctx context.Context, data *Provinces) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, provincesRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Name, data.Id)
	return err
}

func (m *defaultProvincesModel) tableName() string {
	return m.table
}
