// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	homesTblFieldNames          = builder.RawFieldNames(&HomesTbl{}, true)
	homesTblRows                = strings.Join(homesTblFieldNames, ",")
	homesTblRowsExpectAutoSet   = strings.Join(stringx.Remove(homesTblFieldNames, "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"), ",")
	homesTblRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(homesTblFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"))
)

type (
	homesTblModel interface {
		Insert(ctx context.Context, data *HomesTbl) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*HomesTbl, error)
		Update(ctx context.Context, data *HomesTbl) error
		Delete(ctx context.Context, id int64) error
	}

	defaultHomesTblModel struct {
		conn  sqlx.SqlConn
		table string
	}

	HomesTbl struct {
		Id                 int64          `db:"id"`
		Name               string         `db:"name"`
		Description        sql.NullString `db:"description"`
		ProvinceCode       int64          `db:"province_code"`
		DistrictCode       int64          `db:"district_code"`
		WardCode           int64          `db:"ward_code"`
		Address            string         `db:"address"`
		WifiService        int64          `db:"wifi_service"`        // VND/MONTH -1: No, 0: Free
		ElectricityService int64          `db:"electricity_service"` // VND/MONTH -1: No, 0: Free
		WaterService       int64          `db:"water_service"`       // VND/MONTH -1: No, 0: Free
		CleaningService    int64          `db:"cleaning_service"`    // VND/MONTH -1: No, 0: Free
		ParkingService     int64          `db:"parking_service"`     // VND/MONTH -1: No, 0: Free
		SecurityService    int64          `db:"security_service"`    // VND/MONTH -1: No, 0: Free
		OtherService       sql.NullString `db:"other_service"`
		Status             int64          `db:"status"` // 1: Draft, 2: Active, 4: Inactive
		CreatedAt          sql.NullInt64  `db:"created_at"`
		CreatedBy          sql.NullInt64  `db:"created_by"`
		UpdatedAt          sql.NullInt64  `db:"updated_at"`
		UpdatedBy          sql.NullInt64  `db:"updated_by"`
	}
)

func newHomesTblModel(conn sqlx.SqlConn) *defaultHomesTblModel {
	return &defaultHomesTblModel{
		conn:  conn,
		table: `"public"."homes_tbl"`,
	}
}

func (m *defaultHomesTblModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultHomesTblModel) FindOne(ctx context.Context, id int64) (*HomesTbl, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", homesTblRows, m.table)
	var resp HomesTbl
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultHomesTblModel) Insert(ctx context.Context, data *HomesTbl) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17)", m.table, homesTblRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.Name, data.Description, data.ProvinceCode, data.DistrictCode, data.WardCode, data.Address, data.WifiService, data.ElectricityService, data.WaterService, data.CleaningService, data.ParkingService, data.SecurityService, data.OtherService, data.Status, data.CreatedBy, data.UpdatedBy)
	return ret, err
}

func (m *defaultHomesTblModel) Update(ctx context.Context, data *HomesTbl) error {
	query := fmt.Sprintf("update %s set %s where id = $1", m.table, homesTblRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Id, data.Name, data.Description, data.ProvinceCode, data.DistrictCode, data.WardCode, data.Address, data.WifiService, data.ElectricityService, data.WaterService, data.CleaningService, data.ParkingService, data.SecurityService, data.OtherService, data.Status, data.CreatedBy, data.UpdatedBy)
	return err
}

func (m *defaultHomesTblModel) tableName() string {
	return m.table
}
