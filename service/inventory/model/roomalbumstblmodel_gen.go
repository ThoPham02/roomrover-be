// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	roomAlbumsTblFieldNames          = builder.RawFieldNames(&RoomAlbumsTbl{}, true)
	roomAlbumsTblRows                = strings.Join(roomAlbumsTblFieldNames, ",")
	roomAlbumsTblRowsExpectAutoSet   = strings.Join(stringx.Remove(roomAlbumsTblFieldNames, "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"), ",")
	roomAlbumsTblRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(roomAlbumsTblFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"))
)

type (
	roomAlbumsTblModel interface {
		Insert(ctx context.Context, data *RoomAlbumsTbl) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*RoomAlbumsTbl, error)
		Update(ctx context.Context, data *RoomAlbumsTbl) error
		Delete(ctx context.Context, id int64) error
	}

	defaultRoomAlbumsTblModel struct {
		conn  sqlx.SqlConn
		table string
	}

	RoomAlbumsTbl struct {
		Id          int64         `db:"id"`
		RoomGroupId int64         `db:"room_group_id"`
		Url         string        `db:"url"`
		Status      int64         `db:"status"`
		CreatedAt   sql.NullInt64 `db:"created_at"`
		CreatedBy   sql.NullInt64 `db:"created_by"`
		UpdatedAt   sql.NullInt64 `db:"updated_at"`
		UpdatedBy   sql.NullInt64 `db:"updated_by"`
	}
)

func newRoomAlbumsTblModel(conn sqlx.SqlConn) *defaultRoomAlbumsTblModel {
	return &defaultRoomAlbumsTblModel{
		conn:  conn,
		table: `"public"."room_albums_tbl"`,
	}
}

func (m *defaultRoomAlbumsTblModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultRoomAlbumsTblModel) FindOne(ctx context.Context, id int64) (*RoomAlbumsTbl, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", roomAlbumsTblRows, m.table)
	var resp RoomAlbumsTbl
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRoomAlbumsTblModel) Insert(ctx context.Context, data *RoomAlbumsTbl) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6)", m.table, roomAlbumsTblRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.RoomGroupId, data.Url, data.Status, data.CreatedBy, data.UpdatedBy)
	return ret, err
}

func (m *defaultRoomAlbumsTblModel) Update(ctx context.Context, data *RoomAlbumsTbl) error {
	query := fmt.Sprintf("update %s set %s where id = $1", m.table, roomAlbumsTblRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Id, data.RoomGroupId, data.Url, data.Status, data.CreatedBy, data.UpdatedBy)
	return err
}

func (m *defaultRoomAlbumsTblModel) tableName() string {
	return m.table
}
