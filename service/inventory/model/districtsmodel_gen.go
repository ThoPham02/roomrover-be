// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	districtsFieldNames          = builder.RawFieldNames(&Districts{})
	districtsRows                = strings.Join(districtsFieldNames, ",")
	districtsRowsExpectAutoSet   = strings.Join(stringx.Remove(districtsFieldNames), ",")
	districtsRowsWithPlaceHolder = strings.Join(stringx.Remove(districtsFieldNames, "`id`"), "=?,") + "=?"
)

type (
	districtsModel interface {
		Insert(ctx context.Context, data *Districts) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Districts, error)
		Update(ctx context.Context, data *Districts) error
		Delete(ctx context.Context, id int64) error
	}

	defaultDistrictsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Districts struct {
		Id         int64         `db:"id"`
		Name       string        `db:"name"`
		ProvinceId sql.NullInt64 `db:"province_id"`
	}
)

func newDistrictsModel(conn sqlx.SqlConn) *defaultDistrictsModel {
	return &defaultDistrictsModel{
		conn:  conn,
		table: "`districts`",
	}
}

func (m *defaultDistrictsModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultDistrictsModel) FindOne(ctx context.Context, id int64) (*Districts, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", districtsRows, m.table)
	var resp Districts
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDistrictsModel) Insert(ctx context.Context, data *Districts) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, districtsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.Name, data.ProvinceId)
	return ret, err
}

func (m *defaultDistrictsModel) Update(ctx context.Context, data *Districts) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, districtsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Name, data.ProvinceId, data.Id)
	return err
}

func (m *defaultDistrictsModel) tableName() string {
	return m.table
}
