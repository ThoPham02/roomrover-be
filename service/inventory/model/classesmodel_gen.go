// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	classesFieldNames          = builder.RawFieldNames(&Classes{})
	classesRows                = strings.Join(classesFieldNames, ",")
	classesRowsExpectAutoSet   = strings.Join(stringx.Remove(classesFieldNames), ",")
	classesRowsWithPlaceHolder = strings.Join(stringx.Remove(classesFieldNames, "`id`"), "=?,") + "=?"
)

type (
	classesModel interface {
		Insert(ctx context.Context, data *Classes) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Classes, error)
		Update(ctx context.Context, data *Classes) error
		Delete(ctx context.Context, id int64) error
	}

	defaultClassesModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Classes struct {
		Id          int64         `db:"id"`
		LenssorId   sql.NullInt64 `db:"lenssor_id"`
		HouseId     sql.NullInt64 `db:"house_id"`
		Name        string        `db:"name"`
		Description string        `db:"description"`
		Acreage     int64         `db:"acreage"`
		Price       float64       `db:"price"`
		Status      int64         `db:"status"`
		CreatedAt   int64         `db:"created_at"`
		UpdatedAt   int64         `db:"updated_at"`
		CreatedBy   int64         `db:"created_by"`
		UpdatedBy   int64         `db:"updated_by"`
	}
)

func newClassesModel(conn sqlx.SqlConn) *defaultClassesModel {
	return &defaultClassesModel{
		conn:  conn,
		table: "`classes`",
	}
}

func (m *defaultClassesModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultClassesModel) FindOne(ctx context.Context, id int64) (*Classes, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", classesRows, m.table)
	var resp Classes
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultClassesModel) Insert(ctx context.Context, data *Classes) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, classesRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.LenssorId, data.HouseId, data.Name, data.Description, data.Acreage, data.Price, data.Status, data.CreatedAt, data.UpdatedAt, data.CreatedBy, data.UpdatedBy)
	return ret, err
}

func (m *defaultClassesModel) Update(ctx context.Context, data *Classes) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, classesRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.LenssorId, data.HouseId, data.Name, data.Description, data.Acreage, data.Price, data.Status, data.CreatedAt, data.UpdatedAt, data.CreatedBy, data.UpdatedBy, data.Id)
	return err
}

func (m *defaultClassesModel) tableName() string {
	return m.table
}
