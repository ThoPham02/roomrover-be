// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	wardsFieldNames          = builder.RawFieldNames(&Wards{})
	wardsRows                = strings.Join(wardsFieldNames, ",")
	wardsRowsExpectAutoSet   = strings.Join(stringx.Remove(wardsFieldNames), ",")
	wardsRowsWithPlaceHolder = strings.Join(stringx.Remove(wardsFieldNames, "`id`"), "=?,") + "=?"
)

type (
	wardsModel interface {
		Insert(ctx context.Context, data *Wards) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Wards, error)
		Update(ctx context.Context, data *Wards) error
		Delete(ctx context.Context, id int64) error
	}

	defaultWardsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Wards struct {
		Id         int64         `db:"id"`
		Name       string        `db:"name"`
		DistrictId sql.NullInt64 `db:"district_id"`
	}
)

func newWardsModel(conn sqlx.SqlConn) *defaultWardsModel {
	return &defaultWardsModel{
		conn:  conn,
		table: "`wards`",
	}
}

func (m *defaultWardsModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultWardsModel) FindOne(ctx context.Context, id int64) (*Wards, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", wardsRows, m.table)
	var resp Wards
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultWardsModel) Insert(ctx context.Context, data *Wards) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, wardsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.Name, data.DistrictId)
	return ret, err
}

func (m *defaultWardsModel) Update(ctx context.Context, data *Wards) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, wardsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Name, data.DistrictId, data.Id)
	return err
}

func (m *defaultWardsModel) tableName() string {
	return m.table
}
