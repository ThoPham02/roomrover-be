// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	roomsTblFieldNames          = builder.RawFieldNames(&RoomsTbl{}, true)
	roomsTblRows                = strings.Join(roomsTblFieldNames, ",")
	roomsTblRowsExpectAutoSet   = strings.Join(stringx.Remove(roomsTblFieldNames), ",")
	roomsTblRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(roomsTblFieldNames, "id"))
)

type (
	roomsTblModel interface {
		Insert(ctx context.Context, data *RoomsTbl) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*RoomsTbl, error)
		Update(ctx context.Context, data *RoomsTbl) error
		Delete(ctx context.Context, id int64) error
	}

	defaultRoomsTblModel struct {
		conn  sqlx.SqlConn
		table string
	}

	RoomsTbl struct {
		Id          int64         `db:"id"`
		OwnerId     int64         `db:"owner_id"`
		Name        string        `db:"name"`
		RoomClassId int64         `db:"room_class_id"`
		Status      int64         `db:"status"` // 1: Unavailable, 2: Available, 4: Rented, 8: Inactive
		CreatedAt   sql.NullInt64 `db:"created_at"`
		CreatedBy   sql.NullInt64 `db:"created_by"`
		UpdatedAt   sql.NullInt64 `db:"updated_at"`
		UpdatedBy   sql.NullInt64 `db:"updated_by"`
	}
)

func newRoomsTblModel(conn sqlx.SqlConn) *defaultRoomsTblModel {
	return &defaultRoomsTblModel{
		conn:  conn,
		table: `"public"."rooms_tbl"`,
	}
}

func (m *defaultRoomsTblModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultRoomsTblModel) FindOne(ctx context.Context, id int64) (*RoomsTbl, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", roomsTblRows, m.table)
	var resp RoomsTbl
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRoomsTblModel) Insert(ctx context.Context, data *RoomsTbl) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6, $7, $8, $9)", m.table, roomsTblRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.OwnerId, data.Name, data.RoomClassId, data.Status, data.CreatedAt, data.CreatedBy, data.UpdatedAt, data.UpdatedBy)
	return ret, err
}

func (m *defaultRoomsTblModel) Update(ctx context.Context, data *RoomsTbl) error {
	query := fmt.Sprintf("update %s set %s where id = $1", m.table, roomsTblRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Id, data.OwnerId, data.Name, data.RoomClassId, data.Status, data.CreatedAt, data.CreatedBy, data.UpdatedAt, data.UpdatedBy)
	return err
}

func (m *defaultRoomsTblModel) tableName() string {
	return m.table
}
