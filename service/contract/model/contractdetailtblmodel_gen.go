// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	contractDetailTblFieldNames          = builder.RawFieldNames(&ContractDetailTbl{})
	contractDetailTblRows                = strings.Join(contractDetailTblFieldNames, ",")
	contractDetailTblRowsExpectAutoSet   = strings.Join(stringx.Remove(contractDetailTblFieldNames), ",")
	contractDetailTblRowsWithPlaceHolder = strings.Join(stringx.Remove(contractDetailTblFieldNames, "`id`"), "=?,") + "=?"
)

type (
	contractDetailTblModel interface {
		Insert(ctx context.Context, data *ContractDetailTbl) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ContractDetailTbl, error)
		Update(ctx context.Context, data *ContractDetailTbl) error
		Delete(ctx context.Context, id int64) error
	}

	defaultContractDetailTblModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ContractDetailTbl struct {
		Id         int64 `db:"id"`
		ContractId int64 `db:"contract_id"`
		ServiceId  int64 `db:"service_id"`
		Price      int64 `db:"price"`
		Index      int64 `db:"index"`
		Status     int64 `db:"status"`
		CreatedAt  int64 `db:"created_at"`
		UpdatedAt  int64 `db:"updated_at"`
		CreatedBy  int64 `db:"created_by"`
		UpdatedBy  int64 `db:"updated_by"`
	}
)

func newContractDetailTblModel(conn sqlx.SqlConn) *defaultContractDetailTblModel {
	return &defaultContractDetailTblModel{
		conn:  conn,
		table: "`contract_detail_tbl`",
	}
}

func (m *defaultContractDetailTblModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultContractDetailTblModel) FindOne(ctx context.Context, id int64) (*ContractDetailTbl, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", contractDetailTblRows, m.table)
	var resp ContractDetailTbl
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultContractDetailTblModel) Insert(ctx context.Context, data *ContractDetailTbl) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, contractDetailTblRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.ContractId, data.ServiceId, data.Price, data.Index, data.Status, data.CreatedAt, data.UpdatedAt, data.CreatedBy, data.UpdatedBy)
	return ret, err
}

func (m *defaultContractDetailTblModel) Update(ctx context.Context, data *ContractDetailTbl) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, contractDetailTblRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.ContractId, data.ServiceId, data.Price, data.Index, data.Status, data.CreatedAt, data.UpdatedAt, data.CreatedBy, data.UpdatedBy, data.Id)
	return err
}

func (m *defaultContractDetailTblModel) tableName() string {
	return m.table
}
