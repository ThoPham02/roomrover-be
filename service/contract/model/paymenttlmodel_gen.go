// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	paymentTlFieldNames          = builder.RawFieldNames(&PaymentTl{})
	paymentTlRows                = strings.Join(paymentTlFieldNames, ",")
	paymentTlRowsExpectAutoSet   = strings.Join(stringx.Remove(paymentTlFieldNames), ",")
	paymentTlRowsWithPlaceHolder = strings.Join(stringx.Remove(paymentTlFieldNames, "`id`"), "=?,") + "=?"
)

type (
	paymentTlModel interface {
		Insert(ctx context.Context, data *PaymentTl) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*PaymentTl, error)
		Update(ctx context.Context, data *PaymentTl) error
		Delete(ctx context.Context, id int64) error
	}

	defaultPaymentTlModel struct {
		conn  sqlx.SqlConn
		table string
	}

	PaymentTl struct {
		Id          int64         `db:"id"`
		ContractId  sql.NullInt64 `db:"contract_id"`
		Discount    sql.NullInt64 `db:"discount"`
		Deposit     sql.NullInt64 `db:"deposit"`
		DepositDate sql.NullInt64 `db:"deposit_date"`
		NextBill    sql.NullInt64 `db:"next_bill"`
	}
)

func newPaymentTlModel(conn sqlx.SqlConn) *defaultPaymentTlModel {
	return &defaultPaymentTlModel{
		conn:  conn,
		table: "`payment_tl`",
	}
}

func (m *defaultPaymentTlModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultPaymentTlModel) FindOne(ctx context.Context, id int64) (*PaymentTl, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", paymentTlRows, m.table)
	var resp PaymentTl
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPaymentTlModel) Insert(ctx context.Context, data *PaymentTl) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, paymentTlRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.ContractId, data.Discount, data.Deposit, data.DepositDate, data.NextBill)
	return ret, err
}

func (m *defaultPaymentTlModel) Update(ctx context.Context, data *PaymentTl) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, paymentTlRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.ContractId, data.Discount, data.Deposit, data.DepositDate, data.NextBill, data.Id)
	return err
}

func (m *defaultPaymentTlModel) tableName() string {
	return m.table
}
