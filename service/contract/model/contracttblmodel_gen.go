// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	contractTblFieldNames          = builder.RawFieldNames(&ContractTbl{})
	contractTblRows                = strings.Join(contractTblFieldNames, ",")
	contractTblRowsExpectAutoSet   = strings.Join(stringx.Remove(contractTblFieldNames), ",")
	contractTblRowsWithPlaceHolder = strings.Join(stringx.Remove(contractTblFieldNames, "`id`"), "=?,") + "=?"
)

type (
	contractTblModel interface {
		Insert(ctx context.Context, data *ContractTbl) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ContractTbl, error)
		Update(ctx context.Context, data *ContractTbl) error
		Delete(ctx context.Context, id int64) error
	}

	defaultContractTblModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ContractTbl struct {
		Id          int64          `db:"id"`
		RenterId    int64          `db:"renter_id"`
		LessorId    int64          `db:"lessor_id"`
		RoomId      int64          `db:"room_id"`
		Status      int64          `db:"status"`
		ContractUrl sql.NullString `db:"contract_url"`
		Description string         `db:"description"`
		Start       int64          `db:"start"`
		End         int64          `db:"end"`
		NextBill    int64          `db:"next_bill"`
		Type        int64          `db:"type"` // 0: k coc, 1: coc
		Deposit     int64          `db:"deposit"`
		Deadline    int64          `db:"deadline"`
		DepositUrl  sql.NullString `db:"deposit_url"`
		CreatedAt   int64          `db:"created_at"`
		UpdatedAt   int64          `db:"updated_at"`
		CreatedBy   int64          `db:"created_by"`
		UpdatedBy   int64          `db:"updated_by"`
	}
)

func newContractTblModel(conn sqlx.SqlConn) *defaultContractTblModel {
	return &defaultContractTblModel{
		conn:  conn,
		table: "`contract_tbl`",
	}
}

func (m *defaultContractTblModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultContractTblModel) FindOne(ctx context.Context, id int64) (*ContractTbl, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", contractTblRows, m.table)
	var resp ContractTbl
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultContractTblModel) Insert(ctx context.Context, data *ContractTbl) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, contractTblRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.RenterId, data.LessorId, data.RoomId, data.Status, data.ContractUrl, data.Description, data.Start, data.End, data.NextBill, data.Type, data.Deposit, data.Deadline, data.DepositUrl, data.CreatedAt, data.UpdatedAt, data.CreatedBy, data.UpdatedBy)
	return ret, err
}

func (m *defaultContractTblModel) Update(ctx context.Context, data *ContractTbl) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, contractTblRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.RenterId, data.LessorId, data.RoomId, data.Status, data.ContractUrl, data.Description, data.Start, data.End, data.NextBill, data.Type, data.Deposit, data.Deadline, data.DepositUrl, data.CreatedAt, data.UpdatedAt, data.CreatedBy, data.UpdatedBy, data.Id)
	return err
}

func (m *defaultContractTblModel) tableName() string {
	return m.table
}
