// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	paymentUsedTblFieldNames          = builder.RawFieldNames(&PaymentUsedTbl{})
	paymentUsedTblRows                = strings.Join(paymentUsedTblFieldNames, ",")
	paymentUsedTblRowsExpectAutoSet   = strings.Join(stringx.Remove(paymentUsedTblFieldNames), ",")
	paymentUsedTblRowsWithPlaceHolder = strings.Join(stringx.Remove(paymentUsedTblFieldNames, "`id`"), "=?,") + "=?"
)

type (
	paymentUsedTblModel interface {
		Insert(ctx context.Context, data *PaymentUsedTbl) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*PaymentUsedTbl, error)
		Update(ctx context.Context, data *PaymentUsedTbl) error
		Delete(ctx context.Context, id int64) error
	}

	defaultPaymentUsedTblModel struct {
		conn  sqlx.SqlConn
		table string
	}

	PaymentUsedTbl struct {
		Id        int64 `db:"id"`
		PaymentId int64 `db:"payment_id"`
		ServiceId int64 `db:"service_id"`
		Index     int64 `db:"index"`
		Status    int64 `db:"status"`
		CreatedAt int64 `db:"created_at"`
		UpdatedAt int64 `db:"updated_at"`
		CreatedBy int64 `db:"created_by"`
		UpdatedBy int64 `db:"updated_by"`
	}
)

func newPaymentUsedTblModel(conn sqlx.SqlConn) *defaultPaymentUsedTblModel {
	return &defaultPaymentUsedTblModel{
		conn:  conn,
		table: "`payment_used_tbl`",
	}
}

func (m *defaultPaymentUsedTblModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultPaymentUsedTblModel) FindOne(ctx context.Context, id int64) (*PaymentUsedTbl, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", paymentUsedTblRows, m.table)
	var resp PaymentUsedTbl
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPaymentUsedTblModel) Insert(ctx context.Context, data *PaymentUsedTbl) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, paymentUsedTblRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.PaymentId, data.ServiceId, data.Index, data.Status, data.CreatedAt, data.UpdatedAt, data.CreatedBy, data.UpdatedBy)
	return ret, err
}

func (m *defaultPaymentUsedTblModel) Update(ctx context.Context, data *PaymentUsedTbl) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, paymentUsedTblRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.PaymentId, data.ServiceId, data.Index, data.Status, data.CreatedAt, data.UpdatedAt, data.CreatedBy, data.UpdatedBy, data.Id)
	return err
}

func (m *defaultPaymentUsedTblModel) tableName() string {
	return m.table
}
