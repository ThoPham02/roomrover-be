// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	billFieldNames          = builder.RawFieldNames(&Bill{})
	billRows                = strings.Join(billFieldNames, ",")
	billRowsExpectAutoSet   = strings.Join(stringx.Remove(billFieldNames), ",")
	billRowsWithPlaceHolder = strings.Join(stringx.Remove(billFieldNames, "`id`"), "=?,") + "=?"
)

type (
	billModel interface {
		Insert(ctx context.Context, data *Bill) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Bill, error)
		Update(ctx context.Context, data *Bill) error
		Delete(ctx context.Context, id int64) error
	}

	defaultBillModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Bill struct {
		Id         int64 `db:"id"`
		ContractId int64 `db:"contract_id"`
		Total      int64 `db:"total"`
		Paid       int64 `db:"paid"`
		Status     int64 `db:"status"`
		Month      int64 `db:"month"`
		CreatedAt  int64 `db:"created_at"`
		UpdatedAt  int64 `db:"updated_at"`
		CreatedBy  int64 `db:"created_by"`
		UpdatedBy  int64 `db:"updated_by"`
	}
)

func newBillModel(conn sqlx.SqlConn) *defaultBillModel {
	return &defaultBillModel{
		conn:  conn,
		table: "`bill`",
	}
}

func (m *defaultBillModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultBillModel) FindOne(ctx context.Context, id int64) (*Bill, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", billRows, m.table)
	var resp Bill
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBillModel) Insert(ctx context.Context, data *Bill) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, billRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.ContractId, data.Total, data.Paid, data.Status, data.Month, data.CreatedAt, data.UpdatedAt, data.CreatedBy, data.UpdatedBy)
	return ret, err
}

func (m *defaultBillModel) Update(ctx context.Context, data *Bill) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, billRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.ContractId, data.Total, data.Paid, data.Status, data.Month, data.CreatedAt, data.UpdatedAt, data.CreatedBy, data.UpdatedBy, data.Id)
	return err
}

func (m *defaultBillModel) tableName() string {
	return m.table
}
